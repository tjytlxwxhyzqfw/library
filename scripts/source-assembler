#! /bin/python

import os
import re
import sys

from source import Source as Source

workdir = "."
rootdir = ""
headerdir = ""
sourcedir = ""
lang = ""

def fatal(error):
	print "fatal: %s"%str(error)
	sys.exit(1)

def initenv():
	global rootdir, headerdir, sourcedir
	rootdir = os.getenv("WCC_LIBRARY_PATH")
	if not rootdir:
		raise RuntimeError("intenv(): need 'WCC_LIBRARY_PATH'")
	if not os.path.exists(rootdir):
		raise RuntimeError("intenv(): invalid 'rootdir': %s"%rootdir)
	rootdir = os.path.join(rootdir, lang)
	headerdir = os.path.join(rootdir, "include")
	sourcedir = os.path.join(rootdir, "src")

def header_full_path(name):
	assert name.endswith(".h")
	path = os.path.join(headerdir, name)
	assert os.path.exists(path)
	return path

def source_full_path(name):
	assert name.endswith(".c") or name.endswith(".cpp")
	source_path = None
	for root, dirs, files in os.walk(rootdir):
		if re.search(r"/\.", root):
			continue
		if name in files:
			source_path = os.path.join(root, name)
			break
	return source_path

if __name__ == "__main__":
	print "Source Assembler"
	try:
		lang = sys.argv[1]
		initenv()
		print "headerdir: %s"%headerdir
		print "sourcedir: %s"%sourcedir
		print "workdir: %s"%workdir
		print "lang: %s"%lang
		work_path = os.path.join(workdir, sys.argv[2])
		print "work_path: %s"%work_path
		work = Source(work_path)
		work.erase_comment()
		print "headers: %s"%work.headers
	except RuntimeError, e:
		fatal(e)
	for h in work.headers:
		try:
			header_path = header_full_path(h)
			print "header: %s"%header_path
			header = Source(header_path)
			work.replace_line(r"#include.*?%s"%h, str(header.erase_comment()))
		except RuntimeError, e:
			print "Warning: header: %s"%e
		try:
			source_path = source_full_path(h.replace(".h", ".c"))
			print "source: %s"%source_path
			source = Source(source_path)
			work.code.extend(source.erase_comment().erase_line(r"#include.*?%s"%h).code)
		except RuntimeError, e:
			print "Warning: source: %s"%e
	work.write_to_file("0000.c")
	print "0000.c generated"
