#! /bin/python

import os
import re
import sys

rootdir = "/home/wcc/OnlineJudge/source/"
headerdir = rootdir
sourcedir = os.path.join(rootdir, "src")
workdir = "/home/wcc/OnlineJudge/cf"

sys.path.append(workdir)
from source import Source as Source

#TODO: file class

def header_full_path(name):
	assert name.endswith(".h")
	path = os.path.join(headerdir, name)
	assert os.path.exists(path)
	return path

def source_full_path(name):
	assert name.endswith(".c")
	source_path = None
	for root, dirs, files in os.walk(rootdir):
		if re.search(r"/\.", root):
			continue
		if name in files:
			source_path = os.path.join(root, name)
			break
	return source_path

def assemble(path):
	print "source file: %s"%path
	src = srccode(path)

	headers = parse_header(src)
	print "headers: %s"%reduce(lambda x, y: "%s, %s"%(x,y), headers)

	hsrcs = {}
	for header in headers:
		path = header_full_path(header)
		#print "erase header file: %s"%path
		hsrc = erase_comment(srccode(path))
		hsrcs[header] = reduce(lambda x, y: x + y, hsrc)

	src = replace_header(src, hsrcs)
	print "%s"%reduce(lambda x, y: x + y, src)

if __name__ == "__main__":
	work_path = os.path.join(workdir, sys.argv[1])
	work = Source(work_path)
	work.erase_comment()
	print work.headers
	for h in work.headers:
		try:
			header_path = header_full_path(h)
			print "header: %s"%header_path
			header = Source(header_path)
			work.replace_line(r"#include.*?%s"%h, str(header.erase_comment()))
		except IOError:
			print "Warning: header not found: %s"%header_path
		try:
			source_path = source_full_path(h.replace(".h", ".c"))
			print "source: %s"%source_path
			source = Source(source_path)
			work.code.extend(source.erase_comment().erase_line(r"#include.*?%s"%h).code)
		except IOError:
			print "Warning: source not found: %s"%source_path
	work.write_to_file("0000.c")
	print "0000.c generated"
